// -------------------------------------------------------------------------

/**
 *  This class contains static methods that implementing sorting of an array of numbers
 *  using different sort algorithms.
 *
 *  @author
 *  @version HT 2020
 */

 class SortComparison {

    /**
     * Sorts an array of doubles using InsertionSort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order.
     *
     */
    static double [] insertionSort (double a[]){

    	double temp;
    	for(int i= 1; i< a.length; i++) {
    		for(int j = i; j > 0; j--){
    			if(a[j] < a[j-1]){
    				temp = a[j];
    				a[j] = a[j-1];
    				a[j-1] = temp;
    			}
    		}
    	}
    	return a;
    }//end insertionsort
	
	    /**
     * Sorts an array of doubles using Selection Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double [] selectionSort (double a[]){

    	int n = a.length;
    	// One by one move boundary of unsorted subarray
    	for(int i= 0; i< n-1; i++){
    	// Find the minimum element in unsorted array
    		int min_elem= i;
    		for(int j = i+1; j < n; j++)
    			if(a[j] < a[min_elem])
    				min_elem= j;
    	// Swap the found minimum element with the first element
    				double temp = a[min_elem];
    				a[min_elem] = a[i];
    				a[i] = temp;
    	}
    	
    	return a;

    }//end selectionsort

    /**
     * Sorts an array of doubles using Quick Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double[] quickSort(double a[]){
    	 recursiveQuick(a, 0, a.length-1);
    	 return a;
		 //todo: implement the sort

    }//end quicksort
    
    static void recursiveQuick(double a[], int low, int high) {
    	if(high <= low) {return;}
    	int pivotPos= partition(a, high, low);
    	recursiveQuick(a, low, pivotPos-1);
    	recursiveQuick(a, pivotPos+1, high);
    }
    /*
     * Used by the quicksort algorithm to separate the array into two sub arrays 
     * 
     */
    static int partition(double[] vals, int high, int low) {
    	int i = low;
    	int j = high+1;
    	double pivot = vals[low];
    	while(true) {
    		while((pivot<vals[++i])) {
    			if(i == high) break;}
    		while((vals[--j]<pivot)) {
    			if(j == low) break;}
    		if(i>= j) break;
    		double temp = vals[i];
    		vals[i] = vals[j];
    		vals[j] = temp;
    	}
    	vals[low] = vals[j];
    	vals[j] = pivot;
    	return j;
    }

    /**
     * Sorts an array of doubles using Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     * @param a: An unsorted array of doubles.
     * @return array sorted in ascending order
     *
     */
    static double[] mergeSortRecursive(double[] a) {
    	double[] sub = new double[a.length];
    	mergeSort(a, sub, 0, a.length-1);
    	return a;
    }
    /**
     * Sorts an array of doubles using iterative implementation of Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     *
     * @param a: An unsorted array of doubles.
     * @return after the method returns, the array must be in ascending sorted order.
     */

    static double[] mergeSortIterative (double a[]) {
    	int n = a.length;
    	double[] aux = new double[n];
    	for(int size=1;size<n; size=size*2) {
    		for(int low=0;low<n-size;low+=size*2) {
    			mergeArrays(a,aux,low,low+size-1,Math.min(low+size+size-1, n-1));
    		}
    	}
    	return a;
	
    }//end mergesortIterative
    /**
     * part of the recursive merge sort function, merges the arrays
     * 
     */
    static void mergeArrays(double a[], double aux[], int low, int middle, int high) {
    	for(int t=low;t<=high;t++) {
			 aux[t] = a[t];
		 }
		 int i=low, j=middle+1;
		 for(int t=low;t<=high;t++) {
			 if(i>middle)	 a[t] = aux[j++];
			 else if(j>high) a[t] = aux[i++];
			 else if(Double.compare(aux[j], aux[i])<0) a[t] = aux[j++];
			 else 			 a[t] = aux[i++];
		 }
    }
    
    
    /**
     * Sorts an array of doubles using recursive implementation of Merge Sort.
     * This method is static, thus it can be called as SortComparison.sort(a)
     *
     * @param a: An unsorted array of doubles.
     * @return after the method returns, the array must be in ascending sorted order.
     */
    static void mergeSort(double a[], double aux[], int low, int high) {
    	if(high<=low) return;
    	int mid = low+(high-low)/2;
    	mergeSort(a, aux, low, mid);
    	mergeSort(a, aux, mid+1, high);
    	if(!(Double.compare(a[mid+1], a[mid])<0)) return;
    	mergeArrays(a, aux, low, mid, high);
	
   }//end mergeSortRecursive
    	
    


    public static void main(String[] args) {

        //todo: do experiments as per assignment instructions
    }

 }//end class
